import { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useState } from "react";


const PasswordRecover: NextPage = () => {
    // Get token from URL params
    const router = useRouter()
    const token = router.query.token;

    const [newPassword, setNewPassword] = useState("");
    const [newPasswordConf, setNewPasswordConf] = useState("");
    const [requestMade, setRequestMade] = useState(false);

    const [isCheckingPassword, setIsCheckingPassword] = useState(false);
    const [log, setLog] = useState("");
    const [isSuccess, setIsSuccess] = useState(false);

    const handlePasswordChange = (e: React.BaseSyntheticEvent) => {
        const v = e.target.value as string;
        setNewPassword(v);
    };

    const handlePasswordConfChange = (e: React.BaseSyntheticEvent) => {
        const v = e.target.value as string;
        setNewPasswordConf(v);
    };

    const handleRecover = (e: React.BaseSyntheticEvent) => {
        e.preventDefault();
        e.stopPropagation();

        if (newPassword.length < 8) {
            setLog("Password must be at least 8 characters")
            return;
        }

        if (newPassword !== newPasswordConf) {
            setLog("Passwords must match!")
            return
        }

        let b = new FormData()
        b.append("password", newPassword)

        const url = new URL(`/auth/check-recover?token=${token}`, process.env.NEXT_PUBLIC_API_URL)
        fetch(url, { method: 'POST', body: b })
            .then(res => {
                if (res.ok) {
                    setLog("Success! You will be redirected in a few seconds")
                    setTimeout(() => {
                        router.push("/")
                    }, 3000)
                }
                else {
                    setLog("Something went wrong, please try again in a few seconds ")
                }
            })
        // setIsCheckingPassword(true);
        // setRequestMade(true);
        // if (token) {
        //   recoverConfirm(token, newPassword)
        //     .then((result) => {
        //       setIsSuccess(true);
        //       setIsCheckingPassword(false);
        //     })
        //     .catch((err) => {
        //       setIsSuccess(false); // Prevent user from checking if email adresses are registered
        //       setIsCheckingPassword(false);
        //       setMessage(err);
        //     });
        // } else {
        //   setIsSuccess(false);
        //   setIsCheckingPassword(false);
        //   setMessage("No token provided");
        // }
    };

    const noToken = (
        <>
            <p>This is the password reset page, which you should trigger from the login page, or your user account.</p>
        </>
    );

    const recoveryForm = (
        <form
            className=""
            onSubmit={handleRecover}
        >
            <div className="">
                <h2 className="">Email recovery</h2>
                <div className="">
                    <input
                        onChange={handlePasswordChange}
                        placeholder="Enter your new password"
                        type="password"
                    />
                    <input
                        onChange={handlePasswordConfChange}
                        placeholder="Confirm your new password"
                        type="password"
                    />
                </div>
            </div>
            <div
                className=""
            >
                <div className="">
                    <button
                        className=""
                        type="submit"
                    >
                        Change password
                    </button>
                </div>
            </div>
        </form>
    );

    const requestStatus = (
        <>
            <div className="">
                {isSuccess === true ? (
                    <p>
                        Your password was changed you can now{" "}
                        <Link className="font-bol" href="/auth">
                            login
                        </Link>
                    </p>
                ) : (
                    <p>{log}</p>
                )}
            </div>
        </>
    );

    return (<>
        <Head>
            <title>{`Cosyl | Reset Password`}</title>
            <meta name="description" content="Generated by create next app" />
        </Head>

        <div className="w-full h-full font-serif">
            <div className="bg-slate-50 w-full text-slate-900 flex items-center justify-center">
                {!token ? (
                    noToken
                ) : !isCheckingPassword ? (
                    !requestMade ? (
                        recoveryForm
                    ) : (
                        requestStatus
                    )
                ) : (
                    <div>spinning</div>
                )}
                <Link href="/">Back to Cosyll</Link>
            </div>
        </div>
    </>
    );
};

export default PasswordRecover;